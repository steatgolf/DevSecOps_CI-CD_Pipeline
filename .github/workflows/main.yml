name: FastAPI CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: "us-east-1"
  # ECR_REGISTRY: 
  # ECR_REPOSITORY:
  # IMAGE_TAG:
  

jobs:

  # test:
  #   name: Run FastAPI test
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Install Make
  #       run: sudo apt-get update && sudo apt-get install -y make

  #     - name: Set up Python
  #       uses: actions/setup-python@v5.4.0
  #       with:
  #         python-version: 3.13

  #     - name: Install Dependencies
  #       run: pip install -r src/requirements.txt 

  #     - name: Run Pytest with make
  #       run: make test

  build:
    name: Build image and push to ECR
    runs-on: ubuntu-latest
    environment: dev
    # needs: test
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: "fastapi"
            IMAGE_TAG: ${{ github.sha }}

        run: |
            # Build a docker container and
            # push it to ECR so that it can
            # be deployed to ECS.
            # docker build -t fastapi -f fastapi/Dockerfile fastapi/


            docker build -t fastapi .
            docker tag fastapi:latest $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
            # docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG . -f Dockerfile
            docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
            echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT



  # build-and-push:
  #   name: Build & Push Docker Image to ECR
  #   runs-on: ubuntu-latest
  #   needs: test

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Configure AWS Credentials
  #       uses: aws-actions/configure-aws-credentials@v2
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_REGION }}

  #     - name: Login to Amazon ECR
  #       run: |
  #         aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

  #     - name: Build & Tag Docker Image
  #       run: |
  #         docker build -t my-fastapi-app .
  #         docker tag my-fastapi-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-fastapi-app:latest

  #     - name: Push Docker Image to ECR
  #       run: |
  #         docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-fastapi-app:latest

  # deploy:
  #   name: Deploy to EC2
  #   runs-on: ubuntu-latest
  #   needs: build-and-push

  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Set Up SSH Key
  #       run: |
  #         echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > private_key.pem
  #         chmod 600 private_key.pem

  #     - name: Connect to EC2 & Deploy Docker Image
  #       run: |
  #         ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
  #           echo "Logging in to ECR..."
  #           aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
  #           echo "Pulling new Docker image..."
  #           docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-fastapi-app:latest
            
  #           echo "Stopping and removing previous container..."
  #           docker stop fastapi_app || true
  #           docker rm fastapi_app || true
            
  #           echo "Running new container..."
  #           docker run -d --name fastapi_app -p 80:80 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/my-fastapi-app:latest
  #         EOF
