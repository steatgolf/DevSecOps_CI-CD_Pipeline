name: FastAPI CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY: "fastapi"
  

jobs:

  test:
    name: Run Fastapi unit test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install make
        run: sudo apt-get update && sudo apt-get install -y make

      - name: Set up Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version: 3.13

      - name: Install dependencies
        run: pip install -r src/requirements.txt 

      - name: Run Pytest with make
        run: make test

  sonarqube:
    name: sonarcloud_sast_scan
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: SonarQube Cloud Scan
      uses: SonarSource/sonarqube-scan-action@v5.1.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  snyk_sca_scan:
    name: snyk_sca_scan
    runs-on: ubuntu-latest
    steps:
          
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5.4.0
      with:
        python-version: 3.13

    - name: Install dependencies
      run: pip install -r src/requirements.txt
              
    - name: Install Snyk CLI
      run: npm install -g snyk

    - name: Authenticate Snyk
      run: snyk auth ${{ secrets.SNYK_TOKEN }}

    - name: Run Snyk Test
      run: snyk test --file=src/requirements.txt --severity-threshold=high --json > snyk-sca-report.json || true

    - name: Upload Report as Artifact
      uses: actions/upload-artifact@v4.6.1
      if: always()
      with:
        name: snyk-sca-report
        path: snyk-sca-report.json         

  build:
    name: Build and deploy to EC2
    runs-on: ubuntu-latest
    # environment: dev
    needs: [test, sonarqube, snyk_sca_scan]
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build image
        id: build-image
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}

        run: |
            # Build a docker container and
            # push it to ECR so that it can
            # be deployed to EC2.

            docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
            echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Run Trivy image scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: image
          image-ref: ${{ steps.build-image.outputs.image }}
          format: json
          output: 'trivy-imagescan.json'
          severity: HIGH,CRITICAL
          # Change the value of ignore-unfixed to false if running in production, as it will cause the process to fail when a severity of HIGH or CRITICAL is found.
          ignore-unfixed: true
          exit-code: 1

      - name: Upload Report as Artifact
        uses: actions/upload-artifact@v4.6.1
        if: always()
        with:
          name: trivy-imagescan
          path: trivy-imagescan.json

      - name: Push image to Amazon ECR
        run: |
              # push it to ECR so that it can
              # be deployed to EC2.
              docker push ${{ steps.build-image.outputs.image }}

      - name: Set up SSH key
        run: |
          echo "${{ secrets.SSH_KEY }}" > deploy_key.pem
          chmod 400 deploy_key.pem
          
      - name: Connect to EC2 and deploy docker image
        run: |
          
          ssh -o StrictHostKeyChecking=no -i deploy_key.pem ubuntu@${{ secrets.EC2_IP }} << 'EOF'
            
            # Configure AWS Credentials
            sudo aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            sudo aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            sudo aws configure set region ${{ env.AWS_REGION }}
          
            # login to ECR
            sudo aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 941377147642.dkr.ecr.us-east-1.amazonaws.com
            
            # Stop running docker (if any)
            sudo docker ps -aq | xargs -r sudo docker stop
            sudo docker ps -aq | xargs -r sudo docker rm

            #Run new docker image
            sudo docker run -d -p 80:8000 ${{ steps.build-image.outputs.image }}
          EOF
          
  DAST:
    name: Run ZAP DAST Scan to EC2
    runs-on: ubuntu-latest
    # environment: dev
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          docker_name: ghcr.io/zaproxy/zaproxy:stable
          target: http://${{ secrets.EC2_IP }}
          rules_file_name: .zap/rules.tsv
          cmd_options: -a
          # fail_action: true = fail the job if medium or high risk level are found.
          fail_action: true
          artifact_name: zap-dast-report.json
          allow_issue_writing: true

      - name: Upload Report as Artifact
        uses: actions/upload-artifact@v4.6.1
        if: always()
        with:
          name: zap-dast-report
          path: zap-dast-report.json 

